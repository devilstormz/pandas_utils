import pandas as pd
import numpy as np
from typing import Dict, List, Tuple, Optional
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class CollateralSwapMatchingEngine:
    """
    A matching engine to identify collateral swaps from bond borrow/lend and repo/reverse repo trades
    and classify them as upgrades or downgrades based on product hierarchy and bond ratings.
    """
    
    def __init__(self):
        # Product hierarchy (higher number = higher quality)
        self.product_hierarchy = {
            'GOVT': 3,
            'CORP': 2,
            'ABS': 1
        }
        
        # Bond rating hierarchy (higher number = higher quality)
        self.rating_hierarchy = {
            'AAA': 10, 'AA+': 9, 'AA': 8, 'AA-': 7,
            'A+': 6, 'A': 5, 'A-': 4,
            'BBB+': 3, 'BBB': 2, 'BBB-': 1,
            'BB+': 0, 'BB': -1, 'BB-': -2,
            'B+': -3, 'B': -4, 'B-': -5,
            'CCC+': -6, 'CCC': -7, 'CCC-': -8,
            'CC': -9, 'C': -10, 'D': -11
        }
        
        self.tolerance_pct = 0.01  # 1% tolerance for notional matching
        self.maturity_tolerance_days = 1  # 1 day tolerance for maturity matching
    
    def _normalize_rating(self, rating: str) -> int:
        """Normalize bond rating to numeric value"""
        if pd.isna(rating) or rating == '':
            return -99  # Unrated gets lowest score
        
        rating_clean = str(rating).upper().strip()
        return self.rating_hierarchy.get(rating_clean, -99)
    
    def _normalize_product_type(self, product_type: str) -> int:
        """Normalize product type to numeric hierarchy value"""
        if pd.isna(product_type) or product_type == '':
            return 0
        
        product_clean = str(product_type).upper().strip()
        return self.product_hierarchy.get(product_clean, 0)
    
    def _calculate_quality_score(self, product_type: str, rating: str) -> int:
        """Calculate overall quality score combining product type and rating"""
        product_score = self._normalize_product_type(product_type) * 100
        rating_score = self._normalize_rating(rating)
        return product_score + rating_score
    
    def _is_notional_match(self, notional1: float, notional2: float) -> bool:
        """Check if two notional amounts match within tolerance"""
        if pd.isna(notional1) or pd.isna(notional2):
            return False
        
        if notional1 == 0 or notional2 == 0:
            return notional1 == notional2
        
        diff_pct = abs(notional1 - notional2) / max(abs(notional1), abs(notional2))
        return diff_pct <= self.tolerance_pct
    
    def _is_maturity_match(self, maturity1, maturity2) -> bool:
        """Check if two maturity dates match within tolerance"""
        if pd.isna(maturity1) or pd.isna(maturity2):
            return False
        
        if isinstance(maturity1, str):
            maturity1 = pd.to_datetime(maturity1)
        if isinstance(maturity2, str):
            maturity2 = pd.to_datetime(maturity2)
        
        diff_days = abs((maturity1 - maturity2).days)
        return diff_days <= self.maturity_tolerance_days
    
    def _identify_bond_borrow_lend_swaps(self, df: pd.DataFrame) -> pd.DataFrame:
        """Identify collateral swaps from bond borrow/lend trades"""
        # Filter for bond borrow/lend with is_secured_flag = True
        secured_trades = df[
            (df['is_secured_flag'] == True) & 
            (df['product_type'].isin(['BOND_BORROW', 'BOND_LEND'])) &
            (df['link_id'].notna())
        ].copy()
        
        if secured_trades.empty:
            return pd.DataFrame()
        
        # Group by link_id to find pairs
        swap_pairs = []
        for link_id, group in secured_trades.groupby('link_id'):
            if len(group) == 2:
                trade1, trade2 = group.iloc[0], group.iloc[1]
                
                # Verify matching criteria
                if (self._is_notional_match(trade1['notional'], trade2['notional']) and
                    self._is_maturity_match(trade1['maturity_date'], trade2['maturity_date']) and
                    trade1['counterparty'] == trade2['counterparty']):
                    
                    # Determine upgrade/downgrade
                    quality1 = self._calculate_quality_score(trade1['collateral_product_type'], trade1['collateral_rating'])
                    quality2 = self._calculate_quality_score(trade2['collateral_product_type'], trade2['collateral_rating'])
                    
                    if quality1 > quality2:
                        swap_type = 'DOWNGRADE'
                        primary_trade, secondary_trade = trade1, trade2
                    elif quality2 > quality1:
                        swap_type = 'UPGRADE'
                        primary_trade, secondary_trade = trade2, trade1
                    else:
                        swap_type = 'NEUTRAL'
                        primary_trade, secondary_trade = trade1, trade2
                    
                    swap_pairs.append({
                        'link_id': link_id,
                        'trade_id_1': trade1['trade_id'],
                        'trade_id_2': trade2['trade_id'],
                        'swap_type': swap_type,
                        'swap_source': 'BOND_BORROW_LEND',
                        'primary_trade_id': primary_trade['trade_id'],
                        'secondary_trade_id': secondary_trade['trade_id'],
                        'quality_score_1': quality1,
                        'quality_score_2': quality2
                    })
        
        return pd.DataFrame(swap_pairs)
    
    def _identify_repo_reverse_repo_swaps(self, df: pd.DataFrame) -> pd.DataFrame:
        """Identify collateral swaps from repo/reverse repo trades"""
        # Filter for repo/reverse repo with collateral_swap_flag = True
        repo_trades = df[
            (df['collateral_swap_flag'] == True) & 
            (df['product_type'].isin(['REPO', 'REVERSE_REPO'])) &
            (df['link_id'].notna())
        ].copy()
        
        if repo_trades.empty:
            return pd.DataFrame()
        
        # Group by link_id to find pairs
        swap_pairs = []
        for link_id, group in repo_trades.groupby('link_id'):
            if len(group) == 2:
                trade1, trade2 = group.iloc[0], group.iloc[1]
                
                # Verify matching criteria
                if (self._is_notional_match(trade1['notional'], trade2['notional']) and
                    self._is_maturity_match(trade1['maturity_date'], trade2['maturity_date']) and
                    trade1['counterparty'] == trade2['counterparty']):
                    
                    # Determine upgrade/downgrade
                    quality1 = self._calculate_quality_score(trade1['collateral_product_type'], trade1['collateral_rating'])
                    quality2 = self._calculate_quality_score(trade2['collateral_product_type'], trade2['collateral_rating'])
                    
                    if quality1 > quality2:
                        swap_type = 'DOWNGRADE'
                        primary_trade, secondary_trade = trade1, trade2
                    elif quality2 > quality1:
                        swap_type = 'UPGRADE'
                        primary_trade, secondary_trade = trade2, trade1
                    else:
                        swap_type = 'NEUTRAL'
                        primary_trade, secondary_trade = trade1, trade2
                    
                    swap_pairs.append({
                        'link_id': link_id,
                        'trade_id_1': trade1['trade_id'],
                        'trade_id_2': trade2['trade_id'],
                        'swap_type': swap_type,
                        'swap_source': 'REPO_REVERSE_REPO',
                        'primary_trade_id': primary_trade['trade_id'],
                        'secondary_trade_id': secondary_trade['trade_id'],
                        'quality_score_1': quality1,
                        'quality_score_2': quality2
                    })
        
        return pd.DataFrame(swap_pairs)
    
    def identify_collateral_swaps(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Main method to identify all collateral swaps from the trade dataframe
        
        Args:
            df: Trade dataframe with required columns
            
        Returns:
            DataFrame with identified collateral swaps
        """
        # Validate required columns
        required_columns = [
            'trade_id', 'product_type', 'notional', 'maturity_date', 
            'counterparty', 'link_id', 'is_secured_flag', 'collateral_swap_flag',
            'collateral_product_type', 'collateral_rating'
        ]
        
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            raise ValueError(f"Missing required columns: {missing_columns}")
        
        # Identify swaps from both sources
        bond_swaps = self._identify_bond_borrow_lend_swaps(df)
        repo_swaps = self._identify_repo_reverse_repo_swaps(df)
        
        # Combine all identified swaps
        all_swaps = pd.concat([bond_swaps, repo_swaps], ignore_index=True)
        
        return all_swaps
    
    def tag_trades_with_swaps(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Tag the original dataframe with collateral swap information
        
        Args:
            df: Original trade dataframe
            
        Returns:
            DataFrame with additional collateral swap columns
        """
        # Create a copy to avoid modifying original
        result_df = df.copy()
        
        # Initialize new columns
        result_df['is_collateral_swap'] = False
        result_df['collateral_swap_type'] = None
        result_df['collateral_swap_source'] = None
        result_df['collateral_swap_link_id'] = None
        result_df['collateral_swap_pair_trade_id'] = None
        result_df['collateral_quality_score'] = None
        
        # Identify swaps
        swaps_df = self.identify_collateral_swaps(df)
        
        if not swaps_df.empty:
            # Create mapping for trade tagging
            for _, swap in swaps_df.iterrows():
                # Tag both trades in the swap
                trade_ids = [swap['trade_id_1'], swap['trade_id_2']]
                
                for trade_id in trade_ids:
                    mask = result_df['trade_id'] == trade_id
                    result_df.loc[mask, 'is_collateral_swap'] = True
                    result_df.loc[mask, 'collateral_swap_type'] = swap['swap_type']
                    result_df.loc[mask, 'collateral_swap_source'] = swap['swap_source']
                    result_df.loc[mask, 'collateral_swap_link_id'] = swap['link_id']
                    
                    # Set pair trade ID
                    pair_id = swap['trade_id_2'] if trade_id == swap['trade_id_1'] else swap['trade_id_1']
                    result_df.loc[mask, 'collateral_swap_pair_trade_id'] = pair_id
                    
                    # Set quality score
                    quality_score = swap['quality_score_1'] if trade_id == swap['trade_id_1'] else swap['quality_score_2']
                    result_df.loc[mask, 'collateral_quality_score'] = quality_score
        
        return result_df
    
    def get_swap_summary(self, df: pd.DataFrame) -> Dict:
        """
        Get summary statistics of identified collateral swaps
        
        Args:
            df: Trade dataframe (preferably after tagging)
            
        Returns:
            Dictionary with summary statistics
        """
        if 'is_collateral_swap' not in df.columns:
            df = self.tag_trades_with_swaps(df)
        
        swap_trades = df[df['is_collateral_swap'] == True]
        
        summary = {
            'total_trades': len(df),
            'collateral_swap_trades': len(swap_trades),
            'collateral_swap_pairs': len(swap_trades) // 2,
            'swap_percentage': (len(swap_trades) / len(df)) * 100 if len(df) > 0 else 0,
            'upgrade_count': len(swap_trades[swap_trades['collateral_swap_type'] == 'UPGRADE']),
            'downgrade_count': len(swap_trades[swap_trades['collateral_swap_type'] == 'DOWNGRADE']),
            'neutral_count': len(swap_trades[swap_trades['collateral_swap_type'] == 'NEUTRAL']),
            'bond_borrow_lend_swaps': len(swap_trades[swap_trades['collateral_swap_source'] == 'BOND_BORROW_LEND']),
            'repo_reverse_repo_swaps': len(swap_trades[swap_trades['collateral_swap_source'] == 'REPO_REVERSE_REPO'])
        }
        
        return summary


# Example usage and testing
def create_sample_data():
    """Create sample trade data for testing"""
    np.random.seed(42)
    
    sample_trades = [
        # Bond Borrow/Lend Collateral Swap (Upgrade)
        {
            'trade_id': 'T001',
            'product_type': 'BOND_BORROW',
            'notional': 1000000,
            'maturity_date': '2024-12-31',
            'counterparty': 'CP001',
            'link_id': 'L001',
            'is_secured_flag': True,
            'collateral_swap_flag': False,
            'collateral_product_type': 'CORP',
            'collateral_rating': 'BBB'
        },
        {
            'trade_id': 'T002',
            'product_type': 'BOND_LEND',
            'notional': 1000000,
            'maturity_date': '2024-12-31',
            'counterparty': 'CP001',
            'link_id': 'L001',
            'is_secured_flag': True,
            'collateral_swap_flag': False,
            'collateral_product_type': 'GOVT',
            'collateral_rating': 'AAA'
        },
        # Repo/Reverse Repo Collateral Swap (Downgrade)
        {
            'trade_id': 'T003',
            'product_type': 'REPO',
            'notional': 2000000,
            'maturity_date': '2024-11-30',
            'counterparty': 'CP002',
            'link_id': 'L002',
            'is_secured_flag': False,
            'collateral_swap_flag': True,
            'collateral_product_type': 'GOVT',
            'collateral_rating': 'AA+'
        },
        {
            'trade_id': 'T004',
            'product_type': 'REVERSE_REPO',
            'notional': 2000000,
            'maturity_date': '2024-11-30',
            'counterparty': 'CP002',
            'link_id': 'L002',
            'is_secured_flag': False,
            'collateral_swap_flag': True,
            'collateral_product_type': 'CORP',
            'collateral_rating': 'A-'
        },
        # Non-swap trades
        {
            'trade_id': 'T005',
            'product_type': 'BOND_BORROW',
            'notional': 500000,
            'maturity_date': '2024-10-15',
            'counterparty': 'CP003',
            'link_id': None,
            'is_secured_flag': False,
            'collateral_swap_flag': False,
            'collateral_product_type': 'CORP',
            'collateral_rating': 'A'
        }
    ]
    
    return pd.DataFrame(sample_trades)


# Demonstration
if __name__ == "__main__":
    # Create sample data
    df = create_sample_data()
    
    print("Sample Trade Data:")
    print(df[['trade_id', 'product_type', 'notional', 'counterparty', 'link_id', 
              'collateral_product_type', 'collateral_rating']].to_string())
    print("\n" + "="*80 + "\n")
    
    # Initialize matching engine
    engine = CollateralSwapMatchingEngine()
    
    # Identify collateral swaps
    swaps = engine.identify_collateral_swaps(df)
    print("Identified Collateral Swaps:")
    print(swaps.to_string())
    print("\n" + "="*80 + "\n")
    
    # Tag trades with swap information
    tagged_df = engine.tag_trades_with_swaps(df)
    print("Tagged Trade Data:")
    print(tagged_df[['trade_id', 'product_type', 'is_collateral_swap', 
                     'collateral_swap_type', 'collateral_swap_source', 
                     'collateral_quality_score']].to_string())
    print("\n" + "="*80 + "\n")
    
    # Get summary
    summary = engine.get_swap_summary(df)
    print("Collateral Swap Summary:")
    for key, value in summary.items():
        print(f"{key}: {value}")